package com.example.SBD1;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Repository;
import java.security.PublicKey;
import java.util.List;
import java.util.Map;

@Component
public class OracleDao {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    public void createTable() {
        jdbcTemplate.execute("CREATE TABLE TT1 (NOMBRE_VICTIMA varchar2(50), APELLIDO_VICTIMA varchar2(50), DIRECCION_VICTIMA varchar2(100), FECHA_PRIMERA_SOSPECHA date, FECHA_CONFIRMACION date, FECHA_MUERTE date, ESTADO_VICTIMA varchar2(50), NOMBRE_ASOCIADO varchar2(50), APELLIDO_ASOCIADO varchar2(50), FECHA_CONOCIO date, CONTACTO_FISICO varchar2(50), FECHA_INICIO_CONTACTO date, FECHA_FIN_CONTACTO date, NOMBRE_HOSPITAL varchar2(50), DIRECCION_HOSPITAL varchar2(100), UBICACION_VICTIMA varchar(50), FECHA_LLEGADA date, FECHA_RETIRO date, TRATAMIENTO varchar(50), EFECTIVIDAD integer, FECHA_INICIO_TRATAMIENTO date, FECHA_FIN_TRATAMIENTO date, EFECTIVIDAD_EN_VICTIMA integer)");
    }


    public void createTableHospital() {
        jdbcTemplate.execute("CREATE TABLE Hospital (\n" +
                "id_hospital integer generated by default as identity not null,\n" +
                "nombre_hospital VARCHAR2(100),\n" +
                "direccion_hospital VARCHAR2(200),\n" +
                "primary key (id_hospital)\n" +
                ")");
    }

    public void createTableVictima() {
        jdbcTemplate.execute("CREATE TABLE Victima\n" +
                "(\n" +
                "    id_victima             integer generated by default as identity not null,\n" +
                "    nombre_victima         VARCHAR2(100),\n" +
                "    apellido_victima       VARCHAR2(100),\n" +
                "    direccion_victima      VARCHAR2(200),\n" +
                "    UBICACION_VICTIMA      varchar(50),\n" +
                "    fecha_primera_sospecha TIMESTAMP(6),\n" +
                "    fecha_confirmacion     TIMESTAMP(6),\n" +
                "    fecha_muerte           TIMESTAMP(6),\n" +
                "    Estado_victima         VARCHAR2(100),\n" +
                "    id_hospital            integer,\n" +
                "    primary key (id_victima),\n" +
                "    constraint fk_Hospital_Victima foreign key (id_hospital) references Hospital (id_hospital)\n" +
                ")");
    }

    public void createTableAllegado() {
        jdbcTemplate.execute("CREATE TABLE Allegado(\n" +
                "    id_allegado integer generated by default as identity not null,\n" +
                "    nombre_allegado VARCHAR(100),\n" +
                "    apellido_allegado varchar(100),\n" +
                "    fecha_conocio TIMESTAMP(6),\n" +
                "    primary key (id_allegado)\n" +
                "\n" +
                ")");
    }


    public void createTableTipoContacto() {
        jdbcTemplate.execute("CREATE TABLE TIPO_CONTACTO(\n" +
                "    id_Tipo_contacto integer generated by default as identity not null,\n" +
                "    nombre_tipo_contacto VARCHAR(100),\n" +
                "    primary key (id_Tipo_contacto)\n" +
                "\n" +
                ")");
    }

    public void createTableContacto() {
        jdbcTemplate.execute("CREATE TABLE CONTACTO(\n" +
                "    ID_CONTACTO integer generated by default as identity not null,\n" +
                "    ID_VICTIMA integer ,\n" +
                "    ID_ALLEGADO integer ,\n" +
                "    ID_TIPO_CONTACTO integer,\n" +
                "    FECHA_INICIO TIMESTAMP(6),\n" +
                "    FECHA_FIN TIMESTAMP(6),\n" +
                "    primary key (ID_CONTACTO),\n" +
                "    constraint fk_CONTACTO_VICTIMA foreign key (ID_VICTIMA) references Victima(id_victima),\n" +
                "    constraint fk_CONTACTO_ALLEGADO foreign key  (ID_ALLEGADO) references Allegado(id_allegado),\n" +
                "    constraint fk_CONTACTO_TIPO_CONTACTO foreign key (ID_TIPO_CONTACTO) references TIPO_CONTACTO(id_Tipo_contacto)\n" +
                ")");
    }

    public void createTableTratamiento() {
        jdbcTemplate.execute("CREATE TABLE Tratamiento (\n" +
                "    Id_Tratamiento integer generated by default as identity not null,\n" +
                "    Nombre VARCHAR2(100) NOT NULL,\n" +
                "    FECHA_INICIO_TRATAMIENTO TIMESTAMP(6),\n" +
                "    FECHA_FIN_TRATAMIENTO TIMESTAMP(6),\n" +
                "    PRIMARY KEY (Id_Tratamiento),\n" +
                "    EFECTIVIDAD  integer,\n" +
                "    EFECTIVIDAD_VICTIMA integer\n" +
                ")");
    }

    public void createTableVictimaTratamiento() {
        jdbcTemplate.execute("CREATE TABLE VictimaTratamiento(\n" +
                "    ID_TRATAMIENTO_VICTIMA integer generated by default as identity not null,\n" +
                "    FECHA                  TIMESTAMP(6),\n" +
                "    ID_TRATAMIENTO         integer                                  not null,\n" +
                "    ID_VICTIMA             integer                                  not null,\n" +
                "    primary key (ID_TRATAMIENTO_VICTIMA),\n" +
                "    constraint fk_TRATAMIENTO_VICTIMA foreign key (ID_TRATAMIENTO) references Tratamiento(Id_Tratamiento),\n" +
                "    constraint fk_VICTIMA_TRATAMIENTO foreign key (ID_VICTIMA) references Victima (id_victima)\n" +
                ")");
    }




    public void insertModel() {
        jdbcTemplate.update("INSERT INTO Hospital (nombre_hospital, direccion_hospital)\n" +
                "SELECT DISTINCT NOMBRE_HOSPITAL, DIRECCION_HOSPITAL\n" +
                "FROM TT");
    }

    public void insertModelVictima() {
        jdbcTemplate.update("INSERT INTO Victima (nombre_victima, apellido_victima, direccion_victima, UBICACION_VICTIMA, fecha_primera_sospecha, fecha_confirmacion, fecha_muerte, Estado_victima, id_hospital)\n" +
                "SELECT DISTINCT NOMBRE_VICTIMA, APELLIDO_VICTIMA, DIRECCION_VICTIMA, UBICACION_VICTIMA, FECHA_PRIMERA_SOSPECHA, FECHA_CONFIRMACION, FECHA_MUERTE, ESTADO_VICTIMA, id_hospital\n" +
                "FROM TT\n" +
                "LEFT JOIN Hospital ON Hospital.nombre_hospital = TT.NOMBRE_HOSPITAL AND Hospital.direccion_hospital = TT.DIRECCION_HOSPITAL");
    }

    public void consultarTabla() {

        jdbcTemplate.execute("SELECT * FROM VICTIMA");
    }

    public void insertModelAllegado() {
        jdbcTemplate.update("INSERT INTO Allegado (nombre_allegado, apellido_allegado, fecha_conocio)\n" +
                "SELECT DISTINCT  NOMBRE_ASOCIADO, APELLIDO_ASOCIADO, FECHA_CONOCIO\n" +
                "FROM TT");
    }


    public void inserModelTipoContacto() {
        jdbcTemplate.update("INSERT INTO TIPO_CONTACTO (nombre_tipo_contacto)\n" +
                "SELECT DISTINCT CONTACTO_FISICO\n" +
                "FROM TT\n"
        );
    }


    public void insertModelContacto() {
        jdbcTemplate.update("INSERT INTO CONTACTO (ID_VICTIMA, ID_ALLEGADO, id_Tipo_contacto, FECHA_INICIO, FECHA_FIN)\n" +
                "SELECT DISTINCT v.ID_VICTIMA, a.ID_ALLEGADO, tc.id_Tipo_contacto, TT.FECHA_INICIO_CONTACTO, TT.FECHA_FIN_CONTACTO\n" +
                "FROM TT\n" +
                "LEFT JOIN Victima v ON v.NOMBRE_VICTIMA = TT.NOMBRE_VICTIMA AND v.APELLIDO_VICTIMA = TT.APELLIDO_VICTIMA\n" +
                "LEFT JOIN Allegado a ON a.nombre_allegado = TT.NOMBRE_ASOCIADO AND a.apellido_allegado = TT.APELLIDO_ASOCIADO\n" +
                "LEFT JOIN TIPO_CONTACTO tc ON tc.NOMBRE_TIPO_CONTACTO = TT.CONTACTO_FISICO");
    }

    public void insertModelTratamiento() {
        jdbcTemplate.update("INSERT INTO Tratamiento (Nombre, FECHA_INICIO_TRATAMIENTO, FECHA_FIN_TRATAMIENTO, EFECTIVIDAD, EFECTIVIDAD_VICTIMA)\n" +
                "SELECT DISTINCT TRATAMIENTO, FECHA_INICIO_TRATAMIENTO, FECHA_FIN_TRATAMIENTO, EFECTIVIDAD, EFECTIVIDAD_EN_VICTIMA\n" +
                "FROM TT\n" +
                "WHERE TRATAMIENTO IS NOT NULL");
    }

    public void insertModelVictimaTratamiento() {
        jdbcTemplate.update("INSERT INTO VictimaTratamiento (FECHA, ID_TRATAMIENTO, ID_VICTIMA)\n" +
                "SELECT DISTINCT TT.FECHA_INICIO_TRATAMIENTO, T.Id_Tratamiento, V.id_victima\n" +
                "FROM TT \n" +
                "INNER JOIN Tratamiento T ON TT.TRATAMIENTO = T.Nombre\n" +
                "INNER JOIN Victima V ON V.nombre_victima = TT.NOMBRE_VICTIMA AND V.apellido_victima = TT.APELLIDO_VICTIMA AND V.direccion_victima = TT.DIRECCION_VICTIMA");
    }

    public List<Map<String, Object>> findHospitalsWithDeaths() {
        String sql = "SELECT h.nombre_hospital, h.direccion_hospital, COUNT(v.fecha_muerte) AS num_fallecidos\n" +
                "FROM Hospital h\n" +
                "LEFT JOIN Victima v ON h.id_hospital = v.id_hospital\n" +
                "WHERE v.fecha_muerte IS NOT NULL\n" +
                "GROUP BY h.nombre_hospital, h.direccion_hospital";
        return jdbcTemplate.queryForList(sql);
    }

    public List<Map<String, Object>> CuarentenaEfectividad() {
        String sql = "SELECT v.nombre_victima, v.apellido_victima\n" +
                "FROM Victima v\n" +
                "INNER JOIN VictimaTratamiento vt ON v.id_victima = vt.id_victima\n" +
                "INNER JOIN Tratamiento t ON vt.id_tratamiento = t.id_tratamiento\n" +
                "WHERE v.estado_victima = 'En cuarentena'\n" +
                "  AND t.nombre = 'Transfusiones de sangre'\n" +
                "  AND t.efectividad_victima > 5";
        return jdbcTemplate.queryForList(sql);
    }

    public List<Map<String, Object>> AllegadoComunVictima() {
        String sql = "SELECT v.nombre_victima, v.apellido_victima, v.direccion_victima\n" +
                "FROM Victima v\n" +
                "INNER JOIN Contacto c ON v.id_victima = c.id_victima\n" +
                "WHERE v.fecha_muerte IS NOT NULL\n" +
                "GROUP BY v.id_victima, v.nombre_victima, v.apellido_victima, v.direccion_victima\n" +
                "HAVING COUNT(*) > 3";
        return jdbcTemplate.queryForList(sql);
    }

    public List<Map<String, Object>> VicticaSuspendida() {
        String sql = "SELECT v.nombre_victima, v.apellido_victima\n" +
                "FROM Victima v\n" +
                "INNER JOIN Contacto c ON v.id_victima = c.id_victima\n" +
                "WHERE v.estado_victima = 'Suspendida' AND c.id_tipo_contacto = (SELECT id_tipo_contacto FROM Tipo_Contacto WHERE nombre_tipo_contacto = 'Beso')\n" +
                "GROUP BY v.nombre_victima, v.apellido_victima\n" +
                "HAVING COUNT(DISTINCT c.id_allegado) > 2";
        return jdbcTemplate.queryForList(sql);
    }



    public List<Map<String, Object>> TratamientoOxigeno() {
        String sql = "SELECT v.nombre_victima, v.apellido_victima, COUNT(*) AS cantidad_tratamientos\n" +
                "FROM Victima v\n" +
                "INNER JOIN VictimaTratamiento vt ON v.id_victima = vt.id_victima\n" +
                "INNER JOIN Tratamiento t ON vt.id_tratamiento = t.id_tratamiento\n" +
                "WHERE t.nombre = 'Oxigeno'\n" +
                "GROUP BY v.id_victima, v.nombre_victima, v.apellido_victima\n" +
                "ORDER BY cantidad_tratamientos DESC\n" +
                "FETCH FIRST 5 ROWS ONLY";
        return jdbcTemplate.queryForList(sql);
    }

    public List<Map<String, Object>> DelphineWell() {
        String sql = "SELECT DISTINCT  v.nombre_victima, v.apellido_victima, v.fecha_muerte\n" +
                "FROM Victima v\n" +
                "INNER JOIN VictimaTratamiento vt ON v.id_victima = vt.id_victima\n" +
                "INNER JOIN Tratamiento t ON vt.id_tratamiento = t.id_tratamiento\n" +
                "WHERE v.UBICACION_VICTIMA  = '1987 Delphine Well' AND t.nombre = 'Manejo de la presion arterial' AND v.FECHA_MUERTE  IS  NOT NULL";
        return jdbcTemplate.queryForList(sql);
    }

    public List<Map<String, Object>> SuperConsulta() {
        String sql = "SELECT EXTRACT(MONTH FROM fecha_primera_sospecha) as mes,\n" +
                "    nombre_victima, apellido_victima,\n" +
                "    (SELECT COUNT(*) FROM VictimaTratamiento WHERE id_victima = v.id_victima) as num_tratamientos\n" +
                "FROM Victima v\n" +
                "WHERE\n" +
                "    (SELECT COUNT(*) FROM VictimaTratamiento WHERE id_victima = v.id_victima) = \n" +
                "        (SELECT MAX(cnt) FROM \n" +
                "            (SELECT COUNT(*) as cnt FROM VictimaTratamiento GROUP BY id_victima) t)\n" +
                "    OR\n" +
                "    (SELECT COUNT(*) FROM VictimaTratamiento WHERE id_victima = v.id_victima) = \n" +
                "        (SELECT MIN(cnt) FROM \n" +
                "            (SELECT COUNT(*) as cnt FROM VictimaTratamiento GROUP BY id_victima) t)\n" +
                "ORDER BY num_tratamientos DESC";
        return jdbcTemplate.queryForList(sql);
    }

    public List<Map<String, Object>> Porcentaje() {
        String sql = "SELECT \n" +
                "    h.nombre_hospital, \n" +
                "    COUNT(v.id_victima) * 100.0 / (SELECT COUNT(*) FROM Victima) AS porcentaje_victimas\n" +
                "FROM \n" +
                "    Hospital h \n" +
                "    JOIN Victima v ON v.id_hospital = h.id_hospital\n" +
                "GROUP BY \n" +
                "    h.nombre_hospital\n" +
                "ORDER BY \n" +
                "    porcentaje_victimas DESC";
        return jdbcTemplate.queryForList(sql);
    }

    public List<Map<String, Object>> PorcentajeContacto() {
        String sql = "SELECT DISTINCT  h.nombre_hospital, c.nombre_tipo_contacto, COUNT(*) * 100.0 / v_count.total AS porcentaje\n" +
                "FROM Hospital h\n" +
                "INNER JOIN Victima v ON h.id_hospital = v.id_hospital\n" +
                "INNER JOIN (\n" +
                "  SELECT id_victima, COUNT(*) AS total\n" +
                "  FROM Contacto\n" +
                "  GROUP BY id_victima\n" +
                ") v_count ON v.id_victima = v_count.id_victima\n" +
                "INNER JOIN (\n" +
                "  SELECT DISTINCT  ID_VICTIMA, ID_TIPO_CONTACTO, COUNT(*) AS cnt\n" +
                "  FROM Contacto\n" +
                "  GROUP BY ID_VICTIMA, ID_TIPO_CONTACTO\n" +
                ") c_count ON v.id_victima = c_count.ID_VICTIMA\n" +
                "INNER JOIN Tipo_Contacto c ON c_count.ID_TIPO_CONTACTO = c.id_tipo_contacto\n" +
                "WHERE c_count.cnt = (\n" +
                "  SELECT MAX(cnt)\n" +
                "  FROM (\n" +
                "    SELECT DISTINCT  ID_VICTIMA, ID_TIPO_CONTACTO, COUNT(*) AS cnt\n" +
                "    FROM Contacto\n" +
                "    GROUP BY ID_VICTIMA, ID_TIPO_CONTACTO\n" +
                "  ) c2\n" +
                "  WHERE c2.ID_VICTIMA = v.id_victima\n" +
                ")\n" +
                "GROUP BY h.nombre_hospital, c.nombre_tipo_contacto, v_count.total\n" +
                "ORDER BY h.nombre_hospital, porcentaje DESC";
        return jdbcTemplate.queryForList(sql);
    }

    public void eliminarModelo() {

        jdbcTemplate.execute("DROP TABLE VictimaTratamiento");
        jdbcTemplate.execute("DROP TABLE CONTACTO");
        jdbcTemplate.execute("DROP TABLE TIPO_CONTACTO");
        jdbcTemplate.execute("DROP TABLE TRATAMIENTO");
        jdbcTemplate.execute("DROP TABLE ALLEGADO");
        jdbcTemplate.execute("DROP TABLE VICTIMA");
        jdbcTemplate.execute("DROP TABLE HOSPITAL");

    }

    public void EliminarTT() {

        jdbcTemplate.execute("DROP TABLE TT1");


    }



}

